buildscript {
	ext {
		springBootVer = '2.6.2'
		springDepenManaVer = '1.0.11.RELEASE'
		querydslVer = '1.0.10'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}")
	}
}
plugins {
	id 'org.springframework.boot' version "${springBootVer}"
	id 'io.spring.dependency-management' version "${springDepenManaVer}"
	id 'com.ewerk.gradle.plugins.querydsl' version "${querydslVer}"
	id 'java'
	id 'eclipse'
	id 'idea'
}

group = 'com.ssafy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Database
	runtimeOnly 'mysql:mysql-connector-java'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.mongodb:mongodb-driver-sync'
	implementation 'com.querydsl:querydsl-jpa:5.0.0'
	implementation 'com.querydsl:querydsl-apt:5.0.0'
	implementation 'com.querydsl:querydsl-mongodb:5.0.0'

	// web
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.security:spring-security-test'

	// Lombok
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'

	// test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Swagger
	implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'

	// aws
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.6.2'

	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.2'


	//WebSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	compile group: 'org.webjars', name: 'sockjs-client', version: '1.1.2'
	compile group: 'org.webjars', name: 'stomp-websocket', version: '2.3.3-1'

	//jasypt
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3'

}

test {
	useJUnitPlatform()
	systemProperty "jasypt.encryptor.password", project.getProperties().get("jasypt.encryptor.password")
}

/*
 * Querydsl 설정
 * */
//def querydslSrcDir = "src/main/generated"
def querydslSrcDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	springDataMongo = true
	library = "com.querydsl:querydsl-apt"
	querydslSourcesDir = querydslSrcDir
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	querydsl.extendsFrom compileClasspath

	all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	all*.exclude group: 'org.springframework.boot', module: 'logback-classic'
}

sourceSets {
	main {
		java {
			srcDirs = ['src/main/java', querydslSrcDir]
		}
	}
}

task deleteGeneratedSources(type: Delete) {
	delete file(querydslSrcDir)
}

tasks.withType(JavaCompile) { it.dependsOn('deleteGeneratedSources') }

compileQuerydsl {
	if(file(querydslSrcDir).exists() )
		delete(file(querydslSrcDir))
}